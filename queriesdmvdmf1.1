Here's a query to find the top 10 most expensive queries based on cumulative CPU time:
SELECT TOP 10
    SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, ((CASE qs.statement_end_offset 
                                                             WHEN -1 THEN DATALENGTH(qt.TEXT) 
                                                             ELSE qs.statement_end_offset 
                                                           END - qs.statement_start_offset) / 2) + 1) AS query_text,
    qs.total_worker_time AS total_cpu_time,
    qs.execution_count,
    qs.total_logical_reads AS total_logical_reads,
    qs.total_logical_writes AS total_logical_writes,
    qs.total_physical_reads AS total_physical_reads
FROM 
    sys.dm_exec_query_stats qs
CROSS APPLY 
    sys.dm_exec_sql_text(qs.sql_handle) AS qt
ORDER BY 
    qs.total_worker_time DESC;
---------------------------
o find all tables in a SQL Server database without an index, you can query the sys.tables and sys.indexes system views.
SELECT 
    t.name AS TableName
FROM 
    sys.tables t
LEFT JOIN 
    sys.indexes i ON t.object_id = i.object_id
WHERE 
    i.object_id IS NULL
ORDER BY 
    t.name;

-----------------
SELECT 
    t.name AS TableName
FROM 
    sys.tables t
LEFT JOIN 
    sys.indexes i ON t.object_id = i.object_id AND i.type = 2 -- Filter for non-clustered indexes (type = 2)
WHERE 
    i.object_id IS NULL
ORDER BY 
    t.name;
-----------------------------
DECLARE @TableName NVARCHAR(128);
DECLARE @ProcedureName NVARCHAR(128);

DECLARE table_cursor CURSOR FOR
SELECT name
FROM sys.tables;

OPEN table_cursor;

FETCH NEXT FROM table_cursor INTO @TableName;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT 'Table: ' + @TableName;
    PRINT '---------------------------------------------';

    SELECT DISTINCT
        OBJECT_NAME(m.object_id) AS ProcedureName
    FROM
        sys.sql_modules m
    INNER JOIN
        sys.tables t ON m.definition LIKE '%' + t.name + '%'
    WHERE
        t.name = @TableName;

    PRINT '';

    FETCH NEXT FROM table_cursor INTO @TableName;
END

CLOSE table_cursor;
DEALLOCATE table_cursor;

